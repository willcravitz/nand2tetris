// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // a-instruction --> 0###############
    // c-instruction --> 111accccccdddjjj

    Not(in=instruction[15], out=nop); // nop = 1 if a-instruction
    Or(a=nop, b=instruction[5], out=aload); // Load A register if d1 or a-instruction

    Mux16(a=instruction, b=aluout, sel=instruction[15], out=ain); // Input number into A register if a-instruction or alu output if c-instruction
    ARegister(in=ain, load=aload, out=aout, out[0..14]=addressM);

    Mux16(a=aout, b=inM, sel=instruction[12], out=aluin); // Use A or M for computation based on the a bit

    And(a=instruction[15], b=instruction[4], out=dload); // Load D register if d2 and c-instruction
    DRegister(in=aluout, load=dload, out=dout);

    // Input D with A/M into the ALU using the c bits as the flags
    ALU(x=dout, y=aluin, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=aluout, zr=zr, ng=ng);

    And(a=instruction[15], b=instruction[3], out=writeM); // Write to M if d3 and c-instruction


    // JChip (Jip)

    And(a=instruction[2], b=ng, out=jlt); // If j1 and negative output
    And(a=instruction[1], b=zr, out=jeq); // If j2 and zero output

    Or(a=zr, b=ng, out=notpos); 
    Not(in=notpos, out=pos); // Pos = 1 if output is positive
    And(a=instruction[0], b=pos, out=jgt); // If j3 and positive output

    Or(a=jlt, b=jeq, out=jle);
    Or(a=jle, b=jgt, out=jout); // If any jump condition is true the jout = 1

    And(a=instruction[15], b=jout, out=pcload); // Check if c-instruction and jump condition met
    Not(in=pcload, out=inc); // Always increment whenever there is no jump

    PC(in=aout, load=pcload, inc=inc, reset=reset, out[0..14]=pc);

}